library(randomForest)
set.seed(12345)
iris.rf = randomForest(Species ~ ., data=trainData, importance=TRUE)
pred.rf = predict(iris.rf, testData)
pecc(pred.rf, testData$Species)
table(pred.rf, testData$Species)
"run.leave.oneout" = function(dataset, formula, index.output = ncol(dataset))
{
pred.values = factor(levels=levels(dataset[[index.output]]))
for(i in 1:nrow(dataset))
{
model = rpart(formula, data=dataset[-i,], method = "class")
pred.values[i] = predict(model, dataset[i,], type="class")
}
pred.values
}
"pecc" = function(obs, pred) sum(obs == pred) / length(pred)
pecc=function(obs,pred)
sum(obs==pred)/length(obs)
pecc(pred.rf, testData$Species)
library(randomForest)
set.seed(12345)
iris.rf = randomForest(Species ~ ., data=trainData, importance=TRUE)
pred.rf = predict(iris.rf, testData)
pecc(pred.rf, testData$Species)
table(pred.rf, testData$Species)
"run.leave.oneout" = function(dataset, formula, index.output = ncol(dataset))
{
pred.values = factor(levels=levels(dataset[[index.output]]))
for(i in 1:nrow(dataset))
{
model = rpart(formula, data=dataset[-i,], method = "class")
pred.values[i] = predict(model, dataset[i,], type="class")
}
pred.values
}
"pecc" = function(obs, pred) sum(obs == pred) / length(pred)
pecc(pred.rf, testData$Species)
set.seed(107)
inTrain = createDataPartition(y = iris$Species, p = 0.7, list = F)
trainDataIris = iris[inTrain,]
testDataIris = iris[-inTrain,]
nrow(trainDataIris)
nrow(testDataIris)
iris_model_lda = train(iris[,1:4], iris[,5], method = "lda")
iris_model_lda$finalModel
preds_iris_lda = predict(iris_model_lda, testDataIris[,1:4])
preds_iris_lda
confusionMatrix(preds_iris_lda, testDataIris[,5])
iris_lda_cv = train(iris[,1:4], iris[,5], method = "lda", trControl
= trainControl(method = "cv"))
iris_lda_cv$results
iris_lda_cv$resample
set.seed(107)
inTrain = createDataPartition(y = iris$Species, p = 0.7, list = F)
trainDataIris = iris[inTrain,]
testDataIris = iris[-inTrain,]
nrow(trainDataIris)
nrow(testDataIris)
iris_model_lda = train(iris[,1:4], iris[,5], method = "lda")
iris_model_lda$finalModel
iris_model_lda$results
preds_iris_lda = predict(iris_model_lda, testDataIris[,1:4])
preds_iris_lda
confusionMatrix(preds_iris_lda, testDataIris[,5])
# Exemplos Caret - validação cruzada
iris_lda_cv = train(iris[,1:4], iris[,5], method = "lda", trControl
= trainControl(method = "cv"))
iris_lda_cv$results
iris_lda_cv$resample
cv.ctrl = trainControl("cv", number = 5)
iris_ann = train(Species ~., data = trainDataIris,
method = "nnet", tuneLength=5, trControl = cv.ctrl,
preProc = c("center", "scale"))
iris_ann
iris_ann = train(Species ~., data = trainDataIris,
method = "nnet", tuneLength=5, trControl = cv.ctrl,
preProc = c("center", "scale"))
iris_ann
model_cv_reg = train(cpus[,c("syct", "mmin", "mmax", "chmax",
"chmin", "cach")], cpus[,"perf"], method = "M5Rules", trControl =
trainControl(method = "repeatedcv", repeats=10))
model_cv_reg$results
library(RWeka)
data(iris)
dim(iris)
head(iris)
View(iris)
View(iris)
data(iris)
dim(iris)
head(iris)
class(iris$Species)
names(iris)
library(MASS)
data(cpus)
dim(cpus)
names(cpus)
class(cpus$perf)
pecc=function(obs,pred)
sum(obs==pred)/length(obs)
rmse=function(obs,pred) sqrt(mean((obs-pred)^2))
mad=function(obs,pred) mean(abs(obs-pred))
set.seed(12345)#gerador do numero aleatorio no mesmo estado para replicar resultados
ind<-sample(2, nrow(iris), replace=TRUE, prob=c(0.7,0.3))# valor 1 aparece com 70% de prob e o 0 com 30% de prob
trainData<-iris[ind==1,]
testData<-iris[ind==2,]
dim(trainData)
dim(testData)
table(trainData$Species)
table(testData$Species)
data(iris)
dim(iris)
head(iris)
class(iris$Species)
names(iris)
pecc=function(obs,pred)
sum(obs==pred)/length(obs)
rmse=function(obs,pred) sqrt(mean((obs-pred)^2))
mad=function(obs,pred) mean(abs(obs-pred))
set.seed(12345)#gerador do numero aleatorio no mesmo estado para replicar resultados
ind<-sample(2, nrow(iris), replace=TRUE, prob=c(0.7,0.3))# valor 1 aparece com 70% de prob e o 0 com 30% de prob
trainData<-iris[ind==1,]
testData<-iris[ind==2,]
dim(trainData)
dim(testData)
table(trainData$Species)
table(testData$Species)
table(ind)
trainData<-iris[ind==1]
trainData<-iris[ind==,1]
trainData<-iris[ind==1,]
biocLite(“limma”)
source("http://bioconductor.org/biocLite.R")
biocLite()
biocLite("limma")
biocLite("ALL")
library(ALL)
data(ALL)
data(ALL)
ALL
dim(ALL)
exp=exprs(ALL)
dim(exp)
class(exp)
exp[1,1:5]
sampleNames(ALL)[1:5]
featureNames(ALL)[1:5]
varMetadata(ALL)
ALL$sex
annotation(ALL)
experimentData(ALL)
abstract(ALL)
subALL
subALL=ALL[2:4,4:7]
subALL
females=ALL[, ALL$sex=="F"]
females
anyB=grep("^B", ALL$BT) #amostras em que o 1º caracter é B
anyB
ALL[, anyB]
exp=exprs(ALL)
exp[2:3, 4:5]
library(genefilter)
install.packages("genefilter")
exp=exprs(ALL)
maximos=apply(exp,1,max)
minimos=aplly(exp,1,min)
minimos=apply(exp,1,min)
vl=maximos/minimos>2
ALLm2=ALL[vl,]
ALLm2
s=which(as.character(ALL$mol.bio)%in%c("BCR/ABL","NEG"))
ALLs=ALLm2[,s]
ALLs
ALLs$mol.bio=factor(ALLs$mol.bio)
table(ALLs$mol.bio)
s=which(as.character(ALL$mol.biol)%in%c("BCR/ABL","NEG"))
ALLs=ALLm2[,s]
ALLs
ALLs$mol.bio=factor(ALLs$mol.biol)
table(ALLs$mol.biol)
maximos=apply(exp,1,max)
minimos=apply(exp,1,min)
vl=maximos/minimos>2
ALLm2=ALL[vl,]
ALLm2
s=which(as.character(ALL$mol.biol) %in% c("BCR/ABL","NEG"))
ALLs=ALLm2[,s]
ALLs
ALLs$mol.bio=factor(ALLs$mol.biol)
ALLs$mol.biol=factor(ALLs$mol.biol)
table(ALLs$mol.biol)
tt=rowttest(ALLs, "mol.biol")
tt=rowttests(ALLs, "mol.biol")
library(limma)
design=model.matrix(~ALLm2$mol.biol)
fit=lmFit(ALLm2,design)
fit2=eBayes(fit)
diff=topTable(fit2, coef=2, 10)
diff
unlist(mget(rownames(diff), hgu95av2SYMBOL))
biocLite("hgu95av2.db")
library(hgu95av2.db)
unlist(mget(g, hgu95av2SYMBOL))
library(genefilter)
install.packages("genefilter")
biocLite("genefilter")
library(genefilter)
exp=exprs(ALL)
sds=rowSds(exp)#calcula o desvio padrao por linha
m=median(sds)
hist(sds, breaks=50, col="misttyrose")
hist(sds, breaks=50, col="mistyrose")
abline(v=m, com="blue", lwd=4, lty=2)
abline(v=m, col="blue", lwd=4, lty=2)
abline(v=m*2, col="red", lwd=4, lty=2)
ALLr=ALL[sds >= 3*m, ]
ALLr=ALL[sds >= 3*m, ]
ALLr
maximos=apply(exp,1,max)
minimos=apply(exp,1,min)
vl=maximos/minimos>2
ALLm2=ALL[vl,]
ALLm2
s=which(as.character(ALL$mol.biol) %in% c("BCR/ABL","NEG"))
ALLs=ALLm2[,s]
ALLs
ALLs$mol.biol=factor(ALLs$mol.biol)
table(ALLs$mol.biol)
tt=rowttests(ALLs, "mol.biol")
names(tt)
tt$p.value
rank=order(tt$p.value)
p20=rank[1:20]
tt$p.value[p20]
g=featureNames(ALLm2[p20])
g
annotation(ALL)
biocLite("hgu95av2.db")
library(hgu95av2.db)
unlist(mget(g, hgu95av2SYMBOL))
library(limma)
design=model.matrix(~ALLm2$mol.biol)
fit=lmFit(ALLm2,design)
fit2=eBayes(fit)
diff=topTable(fit2, coef=2, 10)
diff
unlist(mget(rownames(diff), hgu95av2SYMBOL))
biocLite("pd.hugene.1.0.st.v1")
library(ALL)
biocLite("pd.hugene.1.0.st.v1")
biocLite("genefilter")
biocLite("genefilter")
install.packages("biocLite")
biocLite("pd.hugene.1.0.st.v1")
library(pd.hugene.1.0.st.v1)
source("http://bioconductor.org/biocLite.R")
biocLite("pd.hugene.1.0.st.v1")
Install.packages(“rmarkdown”)
Install.packages("rmarkdown")
install.packages("rmarkdown")
sqrt(9)
library(pd.hugene.1.0.st.v1)
data(pd.hugene.1.0.st.v1)
data(GSM1446286_Can1.CEL)
data("GSM1446286_Can1.CEL")
biocLite("pd.hugene.1.0.st.v1")
source("http://bioconductor.org/biocLite.R")
biocLite("pd.hugene.1.0.st.v1")
library(pd.hugene.1.0.st.v1)
data(pd.hugene.1.0.st.v1)
annotation(pd.hugene.1.0.st.v1)
dim(pd.hugene.1.0.st.v1)
exp = exprs(pd.hugene.1.0.st.v1)
experimentData(pd.hugene.1.0.st.v1)
data(HuGene-1_0-st-v1)
biocLite("affy")
library(affy)
data(GSM1446294_Tot3.cel)
data("GSM1446294_Tot3.cel")
data("GSM1446294_Tot3")
# #source("http://bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
biocLite("pd.hugene.1.0.st.v1")
library(pd.hugene.1.0.st.v1)
biocLite("affy")
library(affy)
data(pd.hugene.1.0.st.v1)
library(pd.hugene.1.0.st.v1)
setwd("~/GitHub/Data_Analysis/dataset")
library(oligo)
celFiles <- list.celfiles()
affyRaw <- read.celfiles(celFiles)
eset <- rma(affyRaw)
write.exprs(eset,file="data.txt")
my_frame <- data.frame(exprs(eset))
View(my_frame)
dim(my_frame)
class(my_frame)
featureNames(eset)[1:5]
sampleNames(eset)[1:5]
varMetadata(eset) # nao tem descrição das amostras
conn <- db(pd.hugene.1.0.st.v1)
dbListTables(conn)
dbListFields(conn, 'featureSet')
dbListFields(conn, 'pmfeature')
sql <- 'SELECT * FROM pmfeature INNER JOIN featureSet USING(fsetid)'
probeInfo <- dbGetQuery(conn, sql)
probeInfo[1:10, 1:3]
head(probeInfo)
library(genefilter)
sds=rowSds(my_frame)#calcula o desvio padrao por linha
sds[1:15]
m=median(sds)
m
3*0.2
hist(sds, breaks=20, col="mistyrose")
sum(is.na(my_frame$GSM1446286_Can1.CEL))
sum(is.nan(my_frame$GSM1446286_Can1.CEL))
sum(is.na(my_frame$GSM1446286_Can1.CEL))
sum(is.nan(my_frame$GSM1446286_Can1.CEL))
sum(is.na(my_frame$GSM1446287_Str1.CEL))
sum(is.nan(my_frame$GSM1446287_Str1.CEL))
sum(is.na(my_frame$GSM1446288_Tot1.CEL))
sum(is.nan(my_frame$GSM1446288_Tot1.CEL))
sum(is.na(my_frame$GSM1446289_Can2.CEL))
sum(is.nan(my_frame$GSM1446289_Can2.CEL))
sum(is.na(my_frame$GSM1446290_Str2.CEL))
sum(is.nan(my_frame$GSM1446290_Str2.CEL))
sum(is.na(my_frame$GSM1446291_Tot2.CEL))
sum(is.nan(my_frame$GSM1446291_Tot2.CEL))
sum(is.na(my_frame$GSM1446292_Can3.CEL))
sum(is.nan(my_frame$GSM1446292_Can3.CEL))
sum(is.na(my_frame$GSM1446293_Str3.CEL))
sum(is.nan(my_frame$GSM1446293_Str3.CEL))
sum(is.na(my_frame$GSM1446294_Tot3.CEL))
sum(is.nan(my_frame$GSM1446294_Tot3.CEL))
abline(v=m, col="blue", lwd=4, lty=2)
abline(v=m*3, col="red", lwd=4, lty=2)
sds[1:15]
m=median(sds)
m
sum(is.nan(my_frame))
0.26*3
library(ALL)
data(ALL)
ALL
dim(ALL)
exp=exprs(ALL)
dim(exp)
class(exp)
exp[1,1:5]
sampleNames(ALL)[1:5]
featureNames(ALL)[1:5]
varMetadata(ALL)
ALL$sex
annotation(ALL)
experimentData(ALL)
abstract(ALL)
library(genefilter)
exp=exprs(ALL)
sds=rowSds(exp)#calcula o desvio padrao por linha
m=median(sds)
hist(sds, breaks=50, col="mistyrose")
abline(v=m, col="blue", lwd=4, lty=2)
abline(v=m*2, col="red", lwd=4, lty=2)
ALLr=ALL[sds >= 3*m, ]
ALLr
View(probeInfo)
setwd("~/GitHub/Data_Analysis/dataset")
celFiles <- list.celfiles()
affyRaw <- read.celfiles(celFiles)
eset <- rma(affyRaw)
write.exprs(eset,file="data.txt")
my_frame <- data.frame(exprs(eset))
View(my_frame)
conn <- db(pd.hugene.1.0.st.v1)
dbListTables(conn)
dbListFields(conn, 'featureSet')
dbListFields(conn, 'pmfeature')
sql <- 'SELECT * FROM pmfeature INNER JOIN featureSet USING(fsetid)'
probeInfo <- dbGetQuery(conn, sql)
probeInfo[1:10, 1:3]
head(probeInfo)
sds=rowSds(my_frame)#calcula o desvio padrao por linha
sds[1:15]
m=median(sds)
m
mean(sds)
hist(sds, breaks=20, col="mistyrose")
sum(is.na(my_frame$GSM1446286_Can1.CEL))
sum(is.nan(my_frame$GSM1446286_Can1.CEL))
sum(is.na(my_frame$GSM1446287_Str1.CEL))
sum(is.nan(my_frame$GSM1446287_Str1.CEL))
sum(is.na(my_frame$GSM1446288_Tot1.CEL))
sum(is.nan(my_frame$GSM1446288_Tot1.CEL))
sum(is.na(my_frame$GSM1446289_Can2.CEL))
sum(is.nan(my_frame$GSM1446289_Can2.CEL))
sum(is.na(my_frame$GSM1446290_Str2.CEL))
sum(is.nan(my_frame$GSM1446290_Str2.CEL))
sum(is.na(my_frame$GSM1446291_Tot2.CEL))
sum(is.nan(my_frame$GSM1446291_Tot2.CEL))
sum(is.na(my_frame$GSM1446292_Can3.CEL))
sum(is.nan(my_frame$GSM1446292_Can3.CEL))
sum(is.na(my_frame$GSM1446293_Str3.CEL))
sum(is.nan(my_frame$GSM1446293_Str3.CEL))
sum(is.na(my_frame$GSM1446294_Tot3.CEL))
sum(is.nan(my_frame$GSM1446294_Tot3.CEL))
abline(v=m, col="blue", lwd=4, lty=2)
abline(v=m*3, col="red", lwd=4, lty=2)
sds[1:15]
m=median(sds)
m
mean(sds)
maximos=apply(my_frame,1,max)
maximos
minimos=apply(exp,1,min)
minimos=apply(my_frame,1,min)
minimos
maximos=apply(my_frame,max)
max(maximos)
min(minimos)
sds[1:15]
m=median(sds)
m
means=rowMeans(my_frame)
means
abline(v=m*2, col="red", lwd=4, lty=2)
new_frame=my_frame[sds >= 2*m, ]
View(my_frame)
View(new_frame)
vl=maximos/minimos>2
new_frame2=my_frame[vl,]
View(new_frame2)
nsFilter(eset, var.func=IQR, var.cutoff=0.5, var.filter=TRUE, filterByQuantile=TRUE)
varFilter(eset, var.func=IQR, var.cutoff=0.5, filterByQuantile=TRUE)
filter=varFilter(eset, var.func=IQR, var.cutoff=0.5, filterByQuantile=TRUE)
frame_var_filter <- data.frame(exprs(filter))
View(frame_var_filter)
ns=nsFilter(eset)
View(frame_var_filter)
filter$filter.log
tt = rowttests(new_frame)
tt = rowttests(new_frame, "mol.biol")
tt = rowttests(new_frame, "GSM1446286_Can1.CEL")
tt = rowttests(eset)
View(tt)
require(Biobase)
object<-new("ExpressionSet", exprs=as.matrix(new_frame))
object
tt = rowttests(object)
tt
rank = order(tt$p.value)
p20 = rank[1:20]
tt$p.value[p20]
featureNames(ALLm2[p20])
featureNames(new_frame[p20])
featureNames(object[p20])
library(pd.hugene.1.0.st.v1.db)
biocLite("pd.hugene.1.0.st.v1.db")
source("http://bioconductor.org/biocLite.R")
biocLite("pd.hugene.1.0.st.v1.db")
library(pd.hugene.1.0.st.v1.db)
dbListFields(conn, 'featureSet')
dbListFields(conn, 'pmfeature')
featureNames(tt)
featureNames(object)
unlist(mget(g, connSYMBOL))
g=featureNames(object)
unlist(mget(g, connSYMBOL))
probeInfo <- dbGetQuery(conn, sql)
probeInfo[1:10, 1:3]
unlist(mget(g, probeInfoSYMBOL))
View(frame_var_filter)
View(my_frame)
conn <- db(pd.hugene.1.0.st.v1)
dbListTables(conn)
dbListFields(conn, 'featureSet')
dbListFields(conn, 'pmfeature')
sql <- 'SELECT * FROM pmfeature INNER JOIN featureSet USING(fsetid)'
probeInfo <- dbGetQuery(conn, sql)
probeInfo[1:10, 1:3]
head(probeInfo)
dbListTables(conn)
dbListFields(conn, 'featureSet')
dbListFields(conn, 'pmfeature')
sql <- 'SELECT * FROM pmfeature INNER JOIN featureSet USING(fsetid)'
probeInfo <- dbGetQuery(conn, sql)
probeInfo[1:10, 1:3]
head(probeInfo)
dbListTables(conn)
dbListFields(conn, 'featureSet')
dbListFields(conn, 'pmfeature')
sql <- 'SELECT * FROM pmfeature INNER JOIN featureSet USING(fsetid)'
probeInfo <- dbGetQuery(conn, sql)
probeInfo[1:10, 1:3]
View(my_frame)
require(Biobase)
object<-new("ExpressionSet", exprs=as.matrix(new_frame2))
object
View(new_frame2)
require(Biobase)
object<-new("ExpressionSet", exprs=as.matrix(new_frame2))
object
tt = rowttests(object)
tt
pvalueorder = tt[order(tt$p.value),]
View(pvalueorder)
View(tt)
View(new_frame2)
View(pvalueorder)
